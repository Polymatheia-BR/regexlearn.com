{
    "examples.starter.title": "Praticar",
    "examples.starter.description": "Agora é hora de praticar um pouco para consolidar o que aprendemos.",
  
    "examples.finish.title": "Prática completa!",
    "examples.finish.description": " ",
  
    "steps.starter.title": "Introdução",
    "steps.starter.description": "Regex é a abreviação para `Expressão Regular`. Ele ajuda a corresponder, procurar ou gerenciar texto. Comece digitando `OK` no campo Regex para prosseguir para o primeiro passo e acessar descrições mais detalhadas..",
  
    "steps.whatIsRegex.title": "O que são Expressões Regulares `Regex`?",
    "steps.whatIsRegex.description": "Expressões Regulares são uma cadeia de caracteres que expressam um padrão de busca. Frequentemente é abreviado como `Regex` ou `Regexp`. É usado especialmente para localizar ou substituir palavras em textos. Além disso, podemos testar se um texto está de acordo com as regras que definimos.\\n\\n Por exemplo, digamos que você tenha uma lista com nomes de arquivos. E você deseja apenas encontrar arquivos com a extensão `pdf`. Depois de digitar a expressão `^\\w+\\.pdf$` funcionará. O significado das definições nesta expressão ficará mais claro conforme as etapas avançam.",
  
    "steps.basicMatchers.title": "Correspondentes Básicos",
    "steps.basicMatchers.description": "O caractere ou palavra que queremos encontrar é escrito diretamente. É semelhante a um processo de pesquisa normal. Por exemplo, para encontrar a palavra `curious` no texto, digite o mesmo.",
  
    "steps.dotCharacter.title": "Ponto `.`: Qualquer Caractere",
    "steps.dotCharacter.description": "O ponto `.` permite selecionar qualquer caractere, incluindo caracteres especiais e espaços. Digite um ponto `.` no campo Regex para prosseguir.",
  
    "steps.characterSet.title": "Conjunto de Caracteres `[abc]`",
    "steps.characterSet.description": "Se um dos caracteres em uma palavra pode ser vários caracteres, escrevemos entre colchetes `[]` com todos os caracteres alternativos. Por exemplo, para escrever uma expressão que pode encontrar todas as palavras no texto, digite os caracteres `a`, `e`, `i`, `o`, `u` adjacentemente dentro dos colchetes `[]`.",
  
    "steps.negatedCharacterSet.title": "Conjunto de Caracteres Negados `[^abc]`",
    "steps.negatedCharacterSet.description": "Para encontrar todas as palavras no texto abaixo, exceto `ber` e `bor`, digite `e` e `o` lado a lado após o caractere `^` dentro dos colchetes ` []`.",
  
    "steps.range.title": "Intervalo de Letras`[a-z]`",
    "steps.range.description": "Para encontrar as letras no intervalo especificado, a letra inicial e a letra final são escritas dentro dos colchetes `[]` com um hífen entre elas `-`. É sensível a maiúsculas e minúsculas. Digite a expressão que selecionará todas as letras minúsculas entre `e` e `o`, incluindo elas mesmas.",
  
    "steps.rangeNumber.title": "Intervalo Númerico`[0-9]`",
    "steps.rangeNumber.description": "Para encontrar os números no intervalo especificado, o número inicial e o número final são escritos dentro dos colchetes `[]` com um hífen `-` entre eles. Escreva uma expressão que selecione todos números entre `3` e `6`, incluindo eles mesmos.",
  
    "examples.basicMatchers.title": "Prática: Correspondentes Básicos",
    "examples.basicMatchers.description": "Escreva a expressão que selecionará as palavras `of` no texto.",
 
    "examples.dotCharacter.title": "Prática: Qualquer Caractere",
    "examples.dotCharacter.description": "Digite a expressão para selecionar individualmente letras, números, espaços e caracteres especiais no texto. A expressão digitada deve corresponder a qualquer caractere.",
 
    "examples.characterSet.title": "Prática: Conjuntos de Caracteres",
    "examples.characterSet.description": "Escreva a frase que corresponde a cada palavra no texto. Os únicos caracteres que mudam são as iniciais das palavras.",
 
    "examples.negatedCharacterSet.title": "Prática: Conjuntos de Caracteres Negados",
    "examples.negatedCharacterSet.description": "Escreva a expressão que corresponderá a qualquer coisa diferente das palavras `beor` e `beur` no texto. Faça isso usando o conjunto de caracteres negados.",
 
    "examples.range.title": "Prática: Intervalo de Letras",
    "examples.range.description": "Escreva a expressão que selecionará as letras de `g` a `k` no texto.\\n`g` e `k` também devem ser incluídas neste intervalo.",
 
    "examples.rangeNumber.title": "Prática: Intervalo de Números",
    "examples.rangeNumber.description": "Digite uma expressão para selecionar os números de `2` a `7` no texto.\\n`2` e `7` também devem ser incluídos neste intervalo.",
 
    "steps.repetitions.title": "Repetições",
    "steps.repetitions.description": "Alguns caracteres especiais são usados para especificar quantas vezes um caractere será repetido no texto. Esses caracteres especiais são o sinal de adição `+`, o asterisco `*` e o ponto de interrogação `? `.",
  
    "steps.asterisk.title": "Asterisco `*`",
    "steps.asterisk.description": "Colocamos um asterisco `*` após um caractere para indicar que o caractere pode não corresponder nenhuma vez ou pode corresponder várias vezes. Por exemplo, indique que a letra `e` nunca deve ocorrer no texto, ou pode ocorrer uma ou mais vezes lado a lado.",
  
    "steps.plusCharacter.title": "Sinal de Adição `+`",
    "steps.plusCharacter.description": "Para indicar que um caractere pode ocorrer uma ou mais vezes, colocamos um sinal de mais `+` após um caractere. Por exemplo, indique que a letra `e` pode ocorrer uma ou mais vezes em o texto.",
  
    "steps.questionMark.title": "Ponto de Interrogação `?`",
    "steps.questionMark.description": "Para indicar que um caractere é opcional, colocamos um ponto de interrogação `?` após um caractere. Por exemplo, indique que a seguinte letra `u` é opcional.",
  
    "steps.quantifier.title": "Chaves - 1",
    "steps.quantifier.description": "Para expressar um certo número de ocorrências de um caractere, no final escrevemos chaves `{n}` juntamente com quantas vezes queremos que ocorra. Por exemplo, indique que a seguinte letra `e` pode ocorrer apenas `2` vezes.",
  
    "steps.quantifierMin.title": "Chaves - 2",
    "steps.quantifierMin.description": "Para expressar pelo menos um certo número de ocorrências de um caractere, imediatamente após o caractere escrevemos pelo menos quantas vezes queremos que ele ocorra seguido por uma vírgula `,` e entre chaves `{n, }`. Por exemplo, indique que a seguinte letra `e` pode ocorrer pelo menos `3` vezes.",
  
    "steps.quantifierRange.title": "Chaves - 3",
    "steps.quantifierRange.description": "Para expressar a ocorrência de um caractere em um determinado intervalo de números, escrevemos chaves `{x,y}` com o intervalo que queremos no final. Por exemplo, indique que a seguinte letra `e` só pode ocorrer entre `1` e `3` vezes.",

    "examples.asterisk.title": "Prática: Asterisco `*`",
   "examples.asterisk.description": "Use o asterisco `*` para escrever a expressão que irá selecionar todas as palavras, é adequado para a ausência da letra `e` no texto e a presença de uma ou mais.",

   "examples.plusCharacter.title": "Prática: Sinal de Adição `+`",
   "examples.plusCharacter.description": "Escreva a expressão usando o sinal de mais `+` para selecionar palavras nas quais a letra `e` ocorre uma ou mais vezes no texto.",

   "examples.questionMark.title": "Prática: Ponto de Interrogação `?`",
   "examples.questionMark.description": "Escreva a expressão indicando que a letra `n` é opcional no texto, usando o ponto de interrogação `?`. Assim, ambas as palavras `a` e `an` podem ser selecionadas." ,

   "examples.quantifier.title": "Prática: Chaves - 1",
   "examples.quantifier.description": "Escreva a expressão usando chaves `{}` que encontrará textos contendo `4` números lado a lado. Lembre-se de que o intervalo `[0-9]` corresponderá a um único dígito." ,

   "examples.quantifierMin.title": "Prática: chaves - 2",
   "examples.quantifierMin.description": "Escreva a expressão usando chaves `{}` que encontrará textos contendo pelo menos `2` números lado a lado.",

   "examples.quantifierRange.title": "Prática: chaves - 3",
   "examples.quantifierRange.description": "Escreva a expressão usando chaves `{}` que encontrará textos contendo pelo menos `1` e no máximo `4` números lado a lado.",
    
   "steps.grouping.title": "Parênteses `( )`: Agrupamento",
   "steps.grouping.description": "Podemos agrupar uma expressão e usar esses grupos para referenciar ou impor algumas regras. Para agrupar uma expressão, colocamos `()` entre parênteses. Por enquanto, apenas agrupe `haa` abaixo.",

   "steps.groupReference.title": "Referenciando um Grupo",
   "steps.groupReference.description": "As palavras `ha` e `haa` estão agrupadas abaixo. O primeiro grupo é usado escrevendo `\\1` para evitar a reescrita. Aqui `1` denota a ordem de agrupamento. Digite ` \\2` no final da expressão para se referir ao segundo grupo.",

   "steps.nonCapturingGrouping.title": "Parênteses `(?: )`: Agrupamento sem Captura",
   "steps.nonCapturingGrouping.description": "Você pode agrupar uma expressão e garantir que ela não seja capturada por referências. Por exemplo, abaixo estão dois grupos. No entanto, a primeira referência de grupo que denotamos com `\\1` na verdade indica o segundo grupo, pois o primeiro é um agrupamento sem captura.",

   "steps.pipeCharacter.title": "Caractere de Barra Vertical `|`",
   "steps.pipeCharacter.description": "Permite especificar que uma expressão pode conter diferentes expressões. Assim, todas as expressões possíveis são escritas separadas pelo sinal de barra vertical `|`. Isso difere de intervalos `[abc]`, intervalos operam no nível do caractere. As alternativas estão no nível da expressão. Por exemplo, a expressão a seguir selecionaria `cat` e `rat`. Adicione outra barra vertical `|` ao final da expressão e digite `dog` para que todos as palavras sejam selecionadas.",

   "steps.escapeCharacter.title": "Caractere de Barra Invertida `\\`",
   "steps.escapeCharacter.description": "Existem caracteres especiais que usamos ao escrever regex. `{ } [ ] / \\ + * . $^ | ?` Antes de podermos selecionar esses caracteres, precisamos usar uma barra invertida `\\`. Por exemplo, para selecionar os caracteres ponto `.` e asterisco `*` no texto, vamos adicionar um caractere de barra invertida `\\` antes deles.",

   "steps.caret.title": "Sinal de Circunflexo `^`:\\nSelecionando pelo Início da Linha",
   "steps.caret.description": "Estávamos usando `[0-9]` para localizar números. Para localizar apenas os números que estão no início de uma linha, prefixe a expressão com o sinal `^`.",

   "steps.dollar.title": "Cifrão `$`:\\nSelecionando pelo Fim da Linha",
   "steps.dollar.description": "Vamos usar o sinal `$` após o valor `html` para encontrar os textos `html` que estão no final da linha.",

   "steps.wordCharacter.title": "Caractere da Palavra `\\w`: Letra, Número e Sublinhado",
   "steps.wordCharacter.description": "A expressão `\\w` é usada para encontrar letras, números e caracteres de sublinhado. Vamos usar a expressão `\\w` para encontrar caracteres de palavras no texto.",

   "steps.withoutWordCharacter.title": "Exceto Caractere de Palavra `\\W`",
   "steps.withoutWordCharacter.description": "A expressão `\\W` é usada para encontrar caracteres que não sejam letras, números e sublinhados.",
   
   "steps.numberCharacter.title": "Caractere Numérico `\\d`",
   "steps.numberCharacter.description": "`\\d` é usado para localizar apenas caracteres numéricos.",

   "steps.withoutNumberCharacter.title": "Exceto Caractere de Número `\\D`",
   "steps.withoutNumberCharacter.description": "`\\D` é usado para localizar caracteres não numéricos.",

   "steps.spaceCharacter.title": "Caractere de Espaço `\\s`",
   "steps.spaceCharacter.description": "`\\s` é usado para localizar apenas caracteres de espaço.",

   "steps.withoutSpaceCharacter.title": "Exceto Caractere de Espaço `\\S`",
   "steps.withoutSpaceCharacter.description": "`\\S` é usado para localizar caracteres que não sejam espaços.",

   "steps.lookarounds.title": "Olhar ao Redor",
   "steps.lookarounds.description": "Se quisermos que a frase que estamos escrevendo venha antes ou depois de outra frase, precisamos \"olhar ao redor\". Dê o próximo passo para aprender a \"olhar ao redor\"." ,

   "steps.positiveLookahead.title": "Olhar para Frente Positivo: `(?=)`",
   "steps.positiveLookahead.description": "Por exemplo, queremos selecionar o valor da hora no texto. Portanto, para selecionar apenas os valores numéricos que têm `PM` depois deles, precisamos escrever a expressão de olhar para frente positivo ` (?=)` após nossa expressão. Inclua `PM` após o sinal de `=` dentro dos parênteses.",

   "steps.negativeLookahead.title": "Olhar para Frente Negativo: `(?!)`",
   "steps.negativeLookahead.description": "Por exemplo, queremos selecionar números diferentes do valor da hora no texto. Portanto, precisamos escrever a expressão de olhar para frente negativo `(?!)` após nossa expressão para selecionar apenas os valores numéricos que não têm `PM` após eles. Inclua `PM` após o sinal de `!` dentro dos parênteses.",

   "steps.positiveLookbehind.title": "Olhar para Trás Positivo: `(?<=)`",
   "steps.positiveLookbehind.description": "Por exemplo, queremos selecionar o valor do preço no texto. Portanto, para selecionar apenas os valores numéricos que são precedidos por `$`, precisamos escrever a expressão de olhar para trás positiva `(? <=)` antes da nossa expressão. Adicione `\\$` após o sinal de `=` dentro dos parênteses.",

   "steps.negativeLookbehind.title": "Olhar para Trás Negativo: `(?&lt;!)`",
   "steps.negativeLookbehind.description": "Por exemplo, queremos selecionar números no texto que não sejam o valor do preço. Portanto, para selecionar apenas valores numéricos que não sejam precedidos por `$`, precisamos escrever o olhar para trás negativo ` (?&lt;!)` antes da nossa expressão. Adicione `\\$` após o `!` dentro dos parênteses.",

   "steps.flags.title": "Sinalizadores",
   "steps.flags.description": "Sinalizadores alteram a saída da expressão. É por isso que os sinalizadores também são chamados de `modificadores`. Os sinalizadores determinam se a expressão digitada trata o texto como linhas separadas, diferencia maiúsculas de minúsculas ou localiza todas as correspondências. Continue para o próximo passo para aprender sobre os sinalizadores.",

   "steps.flagsGlobal.title": "Sinalizador Global",
   "steps.flagsGlobal.description": "O sinalizador `global` faz com que a expressão selecione todas as correspondências. Se não for usado, selecionará apenas a primeira correspondência. Agora habilite o sinalizador `global` para poder selecionar todas as correspondências.",

   "steps.flagsMultiline.title": "Sinalizador Multilinha",
   "steps.flagsMultiline.description": "Regex vê todo o texto como uma linha. Mas o sinalizador `multilinha` lida com cada linha separadamente. Dessa forma, as expressões que escrevemos para identificar padrões no final das linhas funcionam separadamente para cada linha. Agora ative o sinalizador `multilinha` para localizar todas as correspondências.",

   "steps.flagsCaseInsensitive.title": "Sinalizador Case-insensitive",
   "steps.flagsCaseInsensitive.description": "Para remover a diferenciação de maiúsculas e minúsculas da expressão que escrevemos, devemos ativar o sinalizador `case-insensitive`.",

   "steps.greedyMatching.title": "Correspondencia Gananciosa",
   "steps.greedyMatching.description": "Regex faz uma correspondência gananciosa por padrão. Isso significa que a correspondência será a mais longa possível. Confira o exemplo abaixo. Ela refere-se a qualquer correspondência que termine em `r` e pode ser qualquer caractere precedido por ele. Mas não para na primeira letra `r`.",

   "steps.lazyMatching.title": "Correspondência Preguiçosa",
   "steps.lazyMatching.description": "Correspondência preguiçosa, ao contrário da correspondência gananciosa, para na primeira correspondência. No exemplo abaixo, adicione uma `?` após o `*` para encontrar a primeira correspondência que termina com a letra ` r` e é precedido por qualquer caractere. Isso significa que esta correspondência será interrompida na primeira letra `r`.",

   "steps.completeAllSteps.title": "Parabéns, você concluiu todas as etapas!",
   "steps.completeAllSteps.description": "Você pode retornar às etapas anteriores sempre que quiser e navegar facilmente por todas as etapas pelas quais passou."
}